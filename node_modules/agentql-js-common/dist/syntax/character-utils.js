"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIdentifierStart = isIdentifierStart;
exports.isIdentifierContinue = isIdentifierContinue;
exports.isDescriptionStart = isDescriptionStart;
exports.isDescriptionContinue = isDescriptionContinue;
function isWhiteSpace(code) {
    return code === 9 || code === 32; // Horizontal Tab or Space
}
function isDigit(code) {
    return 48 <= code && code <= 57; // '0' through '9'
}
function isLetter(code) {
    return (97 <= code && code <= 122) || (65 <= code && code <= 90); // 'a'-'z' or 'A'-'Z'
}
const DESCRIPTION_SYMBOLS = [
    33, // '!'
    34, // '"'
    35, // '#'
    36, // '$'
    37, // '%'
    38, // '&'
    39, // '''
    42, // '*'
    43, // '+'
    44, // ','
    45, // '-'
    46, // '.'
    47, // '/'
    58, // ':'
    59, // ';'
    60, // '<'
    61, // '='
    62, // '>'
    63, // '?'
    64, // '@'
    91, // '['
    92, // '\'
    93, // ']'
    94, // '^'
    95, // '_'
    96, // '`'
    123, // '{'
    124, // '|'
    125, // '}'
    126, // '~'
];
function isValidDescriptionSymbol(code) {
    return DESCRIPTION_SYMBOLS.includes(code);
}
function isIdentifierStart(code) {
    return isLetter(code) || code === 95; // '_' underscore
}
function isIdentifierContinue(code) {
    return isLetter(code) || isDigit(code) || code === 95; // '_' underscore
}
function isDescriptionStart(code) {
    return code === 40;
}
function isDescriptionContinue(code) {
    return (isValidDescriptionSymbol(code) ||
        isDigit(code) ||
        isLetter(code) ||
        isWhiteSpace(code) ||
        code > 127 // allow all non-ascii characters to support all languages
    );
}
