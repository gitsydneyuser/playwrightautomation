"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aqlQueryElements = aqlQueryElements;
exports.aqlQueryData = aqlQueryData;
const axios_1 = require("axios");
const util_1 = require("util");
const zlib_1 = require("zlib");
const api_constants_1 = require("./api-constants");
const errors_1 = require("./errors");
const logger_1 = require("./logger");
const utils_1 = require("./utils");
const MESSAGE_API_KEY_INVALID = `
Invalid or expired API key provided.
Please set a valid AgentQL API key by invoking \`agentql init\` command or by setting the environment variable 'AGENTQL_API_KEY'.
You could refer to the documentation for more information: https://docs.agentql.com/installation/sdk-installation.
`
    .trim()
    .replace(/\n/g, ' ');
const RESPONSE_ERROR_KEY = 'detail';
function _getServerErrorMessage(serverError) {
    if (!serverError || typeof serverError !== 'object')
        return null;
    return serverError.detail || null;
}
function _handle401Error(response, requestId) {
    const serverError = response.data;
    const errorMessage = _getServerErrorMessage(serverError) || MESSAGE_API_KEY_INVALID;
    throw new errors_1.APIKeyError(errorMessage, requestId);
}
function _getHost() {
    return process.env.AGENTQL_API_HOST || api_constants_1.SERVICE_URL;
}
function _getQueryElementUrl() {
    return _getHost() + api_constants_1.GET_AGENTQL_ELEMENT_ENDPOINT;
}
function _getQueryDataUrl() {
    return _getHost() + api_constants_1.GET_AGENTQL_DATA_ENDPOINT;
}
function _queryWorker(url, query, atree, pageUrl, mode, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        logger_1.logger.debug(`Sending request to ${url} with query: ${(0, logger_1.minifyQuery)(query)}`);
        const headers = {
            'Content-Type': 'application/json',
            'X-API-Key': (0, utils_1.getApiKey)(),
            'Content-Encoding': 'gzip',
        };
        const body = JSON.stringify({
            query: query,
            accessibility_tree: atree,
            metadata: { url: pageUrl },
            params: { mode: mode },
            request_origin: 'sdk-playwright-js',
        });
        const gzipAsync = (0, util_1.promisify)(zlib_1.gzip);
        const compressedBody = yield gzipAsync(body);
        try {
            const response = yield axios_1.default.post(url, compressedBody, {
                headers: headers,
                timeout: timeout,
            });
            const result = response.data.response;
            const requestId = response.data.request_id;
            logger_1.logger.debug(`Request ID for the query ${(0, logger_1.minifyQuery)(query)}: ${requestId}`);
            logger_1.logger.debug(`AgentQL server response for ${(0, logger_1.minifyQuery)(query)}: ${JSON.stringify(result, null, 2)}`);
            return result;
        }
        catch (error) {
            if (axios_1.default.isAxiosError(error)) {
                if (error.code === 'ECONNABORTED') {
                    throw new errors_1.AgentQLServerTimeoutError();
                }
                const requestId = (_a = error.response) === null || _a === void 0 ? void 0 : _a.headers['x-request-id'];
                if (((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) === 401) {
                    _handle401Error(error.response, requestId);
                }
                let serverError = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data;
                const errorCode = (_d = error.response) === null || _d === void 0 ? void 0 : _d.status;
                if (serverError) {
                    const serverErrorJson = typeof serverError === 'string' ? JSON.parse(serverError) : serverError;
                    if (typeof serverErrorJson === 'object' && serverErrorJson !== null) {
                        serverError = serverErrorJson[RESPONSE_ERROR_KEY] || serverError;
                    }
                }
                throw new errors_1.AgentQLServerError(serverError, errorCode, requestId);
            }
            else {
                throw new errors_1.AgentQLServerError(error.message);
            }
        }
    });
}
function aqlQueryElements(query, atree, pageUrl, mode, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _queryWorker(_getQueryElementUrl(), query, atree, pageUrl, mode, timeout);
    });
}
function aqlQueryData(query, atree, pageUrl, mode, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _queryWorker(_getQueryDataUrl(), query, atree, pageUrl, mode, timeout);
    });
}
