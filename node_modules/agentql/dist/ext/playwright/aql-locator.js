"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapLocator = wrapLocator;
exports.generateResponseWithLocatorExt = generateResponseWithLocatorExt;
const agentql_js_common_1 = require("agentql-js-common");
const errors_1 = require("../../core/errors");
const logger_1 = require("../../core/logger");
const driver_1 = require("./driver");
function wrapLocator(locator, tf623Element) {
    return Object.assign(locator, {
        tf623Element: tf623Element,
    });
}
class LocatorGenerator {
    constructor(page, response, queryNode) {
        this.page = page;
        this.response = response;
        this.queryNode = queryNode;
    }
    generate() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._processContainerNode(this.queryNode, this.response);
        });
    }
    _processContainerNode(node, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {};
            for (const childNode of node.children) {
                let childResult = null;
                if (childNode instanceof agentql_js_common_1.ContainerListNode) {
                    childResult = yield this._processContainerListNode(childNode, data[childNode.name]);
                }
                else if (childNode instanceof agentql_js_common_1.ContainerNode) {
                    childResult = yield this._processContainerNode(childNode, data[childNode.name]);
                }
                else if (childNode instanceof agentql_js_common_1.IdListNode) {
                    childResult = yield this._processIdListNode(data[childNode.name]);
                }
                else if (childNode instanceof agentql_js_common_1.IdNode) {
                    childResult = yield this._processIdNode(data[childNode.name]);
                }
                else {
                    throw new errors_1.BaseAgentQLError(`Unknown node type: ${childNode.name}`);
                }
                result[childNode.name] = childResult;
            }
            return result;
        });
    }
    _processContainerListNode(node, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            for (const item of data) {
                const itemResult = yield this._processContainerNode(node, item);
                result.push(itemResult);
            }
            return result;
        });
    }
    _processIdNode(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data) {
                return null;
            }
            const locator = yield (0, driver_1.pwLocateInteractiveElement)(this.page, data);
            if (!locator) {
                logger_1.logger.error(`Element not found for ${data}`);
                return null;
            }
            return wrapLocator(locator, data);
        });
    }
    _processIdListNode(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            for (const item of data) {
                const itemResult = yield this._processIdNode(item);
                result.push(itemResult);
            }
            return result;
        });
    }
}
function generateResponseWithLocatorExt(page, response, queryNode) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new LocatorGenerator(page, response, queryNode).generate();
    });
}
