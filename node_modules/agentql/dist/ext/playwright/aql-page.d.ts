import { Page, Response } from 'playwright';
import { ResponseMode } from '../../core/types';
import { LocatorExt } from './aql-locator';
import { AQLResponseProxy } from './aql-response-proxy';
type PageExt = Page & {
    /**
     * Getter method for the last query executed on this page.
     * @returns {Promise<string | null>} The last query or `null` if no query has been made.
     */
    getLastQuery(): Promise<string | null>;
    /**
     * Getter method for the last response from the AgentQL server on this page.
     * @returns {Promise<Record<string, any> | null>} The last response or `null` if no response has been made.
     */
    getLastResponse(): Promise<Record<string, any> | null>;
    /**
     * Getter method for the last accessibility tree generated by the AgentQL SDK on this page.
     * @returns {Promise<string | null>} The last accessibility tree or `null` if no accessibility tree has been made.
     */
    getLastAccessibilityTree(): Promise<string | null>;
    /**
     * AgentQL's `page.goto()` override that uses `domcontentloaded` as the default value for the `waitUntil` parameter.
     * This change addresses issue with the `load` event not being reliably fired on some websites.
     *
     * For parameters information and original method's documentation, please refer to
     * [Playwright's documentation](https://playwright.dev/docs/api/class-page#page-goto)
     */
    goto(url: string, options?: {
        referer?: string;
        timeout?: number;
        waitUntil?: 'load' | 'domcontentloaded' | 'networkidle' | 'commit';
    }): Promise<null | Response>;
    /**
     * Returns a single web element located by a natural language prompt (as opposed to an AgentQL query).
     *
     * @param {string} prompt - The natural language description of the element to locate.
     * @param {object} [options] - Optional parameters for the query.
     * @param {number} [options.timeout] - Timeout value in milliseconds for the connection with backend API service. Defaults to 60 seconds.
     * @param {boolean} [options.waitForNetworkIdle] - Whether to wait for network reaching full idle state before querying the page. Defaults to `true`.
     * @param {boolean} [options.includeHidden] - Whether to include hidden elements on the page. Defaults to `false`.
     * @param {ResponseMode} [options.mode] - The mode of the query. It can be either `'standard'` or `'fast'`. Defaults to `'fast'`.
     * @returns {Promise<LocatorExt | null>} The found element or `null` if no matching elements were found.
     */
    getByPrompt(prompt: string, options?: {
        timeout?: number;
        waitForNetworkIdle?: boolean;
        includeHidden?: boolean;
        mode?: ResponseMode;
    }): Promise<LocatorExt | null>;
    /**
     * Queries the web page for multiple web elements that match the AgentQL query.
     *
     * @param {string} query - An AgentQL query in String format.
     * @param {object} [options] - Optional parameters for the query.
     * @param {number} [options.timeout] - Timeout value in milliseconds for the connection with backend API service. Defaults to 60 seconds.
     * @param {boolean} [options.waitForNetworkIdle] - Whether to wait for network reaching full idle state before querying the page. Defaults to `true`.
     * @param {boolean} [options.includeHidden] - Whether to include hidden elements on the page. Defaults to `false`.
     * @param {ResponseMode} [options.mode] - The mode of the query. It can be either `'standard'` or `'fast'`. Defaults to `'fast'`.
     * @returns {Promise<AQLResponseProxy>} The AgentQL response object with elements that match the query.
     */
    queryElements(query: string, options?: {
        timeout?: number;
        waitForNetworkIdle?: boolean;
        includeHidden?: boolean;
        mode?: ResponseMode;
    }): Promise<AQLResponseProxy>;
    /**
     * Queries the web page for data that matches the AgentQL query, such as blocks of text or numbers.
     *
     * @param {string} query - An AgentQL query in String format.
     * @param {object} [options] - Optional parameters for the query.
     * @param {number} [options.timeout] - Timeout value in milliseconds for the connection with backend API service. Defaults to 900 seconds.
     * @param {boolean} [options.waitForNetworkIdle] - Whether to wait for network reaching full idle state before querying the page. Defaults to `true`.
     * @param {boolean} [options.includeHidden] - Whether to include hidden elements on the page. Defaults to `true`.
     * @param {ResponseMode} [options.mode] - The mode of the query. It can be either `'standard'` or `'fast'`. Defaults to `'fast'`.
     * @returns {Promise<Record<string, any>>} Data that matches the query.
     */
    queryData(query: string, options?: {
        timeout?: number;
        waitForNetworkIdle?: boolean;
        includeHidden?: boolean;
        mode?: ResponseMode;
    }): Promise<Record<string, any>>;
    /**
     * Waits for the page to reach the "Page Ready" state.
     *
     * @param {object} [options] - Optional parameters for waiting.
     * @param {boolean} [options.waitForNetworkIdle] - Whether to wait for network reaching full idle state. Defaults to `true`.
     */
    waitForPageReadyState(options?: {
        waitForNetworkIdle?: boolean;
    }): Promise<void>;
    _setDebugInfo(query: string | null, response: Record<string, any> | null, accessibilityTree: string | null): void;
};
/**
 * Casts a Playwright `Page` object to an AgentQL `Page` type to get access to the AgentQL's querying API.
 *
 * @param {Page} page - The Playwright Page object to be wrapped.
 * @returns {PageExt} The wrapped Page object with AgentQL extensions.
 */
declare function wrap(page: Page): Promise<PageExt>;
export { PageExt, wrap };
//# sourceMappingURL=aql-page.d.ts.map