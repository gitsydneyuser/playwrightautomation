"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AQLResponseProxy = void 0;
const agentql_js_common_1 = require("agentql-js-common");
const errors_1 = require("../../core/errors");
class AQLResponseProxy {
    // data is processed by the LocatorGenerator.generate method
    constructor(data, queryNode) {
        for (const key in queryNode.children) {
            if (Object.prototype.hasOwnProperty.call(queryNode.children, key)) {
                const childNode = queryNode.children[key];
                if (childNode instanceof agentql_js_common_1.ContainerNode) {
                    const childData = data[childNode.name];
                    if (Array.isArray(childData)) {
                        this[childNode.name] = childData.map((item) => new AQLResponseProxy(item, childNode));
                    }
                    else {
                        this[childNode.name] = new AQLResponseProxy(childData, childNode);
                    }
                }
                else if (childNode instanceof agentql_js_common_1.IdNode || childNode instanceof agentql_js_common_1.IdListNode) {
                    this[childNode.name] = data[childNode.name];
                }
                else {
                    throw new errors_1.BaseAgentQLError(`Unknown node type: ${childNode.name}`);
                }
            }
        }
        return new Proxy(this, {
            get(target, prop, receiver) {
                if (typeof prop === 'string') {
                    if (prop in target) {
                        return Reflect.get(target, prop, receiver);
                    }
                    else if (prop === 'then') {
                        // Handle the case when `then` is called on the proxy object in async functions
                        return undefined;
                    }
                    else {
                        throw new errors_1.AttributeNotFoundError(prop, data, queryNode);
                    }
                }
                else {
                    return Reflect.get(target, prop, receiver);
                }
            },
        });
    }
    /**
     * Converts the response data into a structured dictionary based on the query tree.
     *
     * @returns {Promise<Record<string, any>>} A structured dictionary representing the processed response data, with fact nodes replaced by name (values) from the response data. It will have the following structure:
     *
     * ```js
     * {
     *   "query_field": "text content of the corresponding web element"
     * }
     * ```
     */
    toData() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {};
            for (const key in this) {
                const value = this[key];
                // value is null
                if (value === null) {
                    result[key] = null;
                    continue;
                }
                // value is an array
                if (Array.isArray(value)) {
                    if (value.length === 0) {
                        result[key] = [];
                    }
                    else if (value[0] instanceof AQLResponseProxy) {
                        result[key] = yield Promise.all(value.map((item) => item.toData()));
                    }
                    else {
                        // value[0] instanceof Locator
                        result[key] = (yield Promise.all(value.map((item) => _getElementText(item)))).filter((item) => item !== null);
                    }
                    continue;
                }
                // @ts-expect-error value is not null
                if (value instanceof AQLResponseProxy) {
                    result[key] = yield value.toData();
                    continue;
                }
                // value instanceof Locator
                result[key] = yield _getElementText(value);
            }
            return result;
        });
    }
}
exports.AQLResponseProxy = AQLResponseProxy;
function _getElementText(locator) {
    return __awaiter(this, void 0, void 0, function* () {
        const tf623Element = locator.tf623Element;
        if (tf623Element === null || tf623Element === void 0 ? void 0 : tf623Element.name) {
            return tf623Element.name;
        }
        return (yield locator.getAttribute('name')) || (yield locator.textContent()) || null;
    });
}
