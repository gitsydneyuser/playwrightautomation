"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pwGenerateAccessibilityTree = pwGenerateAccessibilityTree;
exports.pwGetByPrompt = pwGetByPrompt;
exports.pwQueryElements = pwQueryElements;
exports.pwQueryData = pwQueryData;
exports.pwLocateInteractiveElement = pwLocateInteractiveElement;
const aql_server_service_1 = require("../../core/aql-server-service");
const aql_tree_1 = require("../../core/aql-tree");
const errors_1 = require("../../core/errors");
const snippet_loader_1 = require("../../core/js-snippets/snippet-loader");
const logger_1 = require("../../core/logger");
const QUERY_TAKE_TIME_MESSAGE = (timeout) => `AgentQL query execution may take longer than expected, especially for complex queries and lengthy webpages. If you notice no activity in the logs, please be patientâ€”the query is still in progress and has not frozen. The current timeout is set to ${timeout} seconds, so you can expect a response within that timeframe. If a timeout error occurs, consider extending the timeout duration to give AgentQL backend more time to finish the work.`;
// Use WeakMap to store the last used id of each page.
const lastUsedIdMap = new WeakMap();
function _setIFramePath(frame, iframePath) {
    return __awaiter(this, void 0, void 0, function* () {
        let scriptContent = yield (0, snippet_loader_1.loadJS)('set-iframe-path');
        scriptContent += `setIframePath({iframe_path: "${iframePath}"});`;
        yield frame.evaluate(scriptContent);
    });
}
function _processFrame(frame, lastUsedId, iframePath, includeHidden) {
    return __awaiter(this, void 0, void 0, function* () {
        let scriptContent = yield (0, snippet_loader_1.loadJS)('generate-accessibility-tree');
        const args = {
            currentGlobalId: lastUsedId,
            processIFrames: false,
            iframePath: iframePath,
            includeHidden: includeHidden,
        };
        scriptContent = `
    ${scriptContent}
    (function(arg) {
      const res = generateAccessibilityTree(arg);
      return JSON.stringify(res);
    })(${JSON.stringify(args)});
  `;
        const result = JSON.parse(yield frame.evaluate(scriptContent));
        // Get all child iframes' tf623_id
        const iframeIds = new Set();
        const iframes = frame.childFrames();
        for (const f of iframes) {
            const element = yield f.frameElement();
            const id = yield element.getAttribute('tf623_id');
            if (id) {
                iframeIds.add(id);
            }
        }
        return {
            atree: result.tree,
            lastUsedId: result.lastUsedId,
            iframeIds: Array.from(iframeIds),
        };
    });
}
function _getChildFrame(frame, childId) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const f of frame.childFrames()) {
            const element = yield f.frameElement();
            const id = yield element.getAttribute('tf623_id');
            if (id && id === childId) {
                return f;
            }
        }
        logger_1.logger.error(`Cannot find child frame with tf623_id=${childId}, url=${frame.url()}`);
        return null;
    });
}
function pwGenerateAccessibilityTree(page, includeHidden) {
    return __awaiter(this, void 0, void 0, function* () {
        const rootElement = page.locator('html');
        if (!rootElement) {
            logger_1.logger.error('Cannot find root element');
            throw new errors_1.AccessibilityTreeError();
        }
        const lastUsedId = lastUsedIdMap.get(page) || 0;
        let result;
        try {
            result = yield (0, aql_tree_1.aqlGenATree)(page.mainFrame(), lastUsedId, includeHidden, _processFrame, _setIFramePath, _getChildFrame);
        }
        catch (error) {
            logger_1.logger.error('Error generating accessibility tree', error);
            throw new errors_1.AccessibilityTreeError();
        }
        lastUsedIdMap.set(page, result.lastUsedId);
        return result.atree;
    });
}
function pwGetByPrompt(page, prompt, timeout, includeHidden, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        const query = `{
    page_element(${prompt})
  }`;
        const { response, atree } = yield pwQueryElements(page, query, timeout, includeHidden, mode);
        return { response, atree, query };
    });
}
function pwQueryElements(page, query, timeout, includeHidden, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        const atree = yield pwGenerateAccessibilityTree(page, includeHidden);
        logger_1.logger.debug(QUERY_TAKE_TIME_MESSAGE(timeout / 1000));
        const response = yield (0, aql_server_service_1.aqlQueryElements)(query, atree, page.url(), mode, timeout);
        return { response, atree };
    });
}
function pwQueryData(page, query, timeout, includeHidden, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        const atree = yield pwGenerateAccessibilityTree(page, includeHidden);
        logger_1.logger.debug(QUERY_TAKE_TIME_MESSAGE(timeout / 1000));
        const response = yield (0, aql_server_service_1.aqlQueryData)(query, atree, page.url(), mode, timeout);
        return { response, atree };
    });
}
function pwLocateInteractiveElement(page, element) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const tf623_id = element === null || element === void 0 ? void 0 : element.tf623_id;
        const iframe_path = ((_a = element === null || element === void 0 ? void 0 : element.attributes) === null || _a === void 0 ? void 0 : _a.iframe_path) || '';
        if (!tf623_id) {
            throw new errors_1.ElementNotFoundError();
        }
        if (iframe_path.length === 0) {
            return page.locator(`[tf623_id="${tf623_id}"]`);
        }
        let frame = page.mainFrame();
        if (iframe_path.length > 0) {
            const iframeIds = iframe_path.split('.');
            for (const iframeId of iframeIds) {
                frame = yield _getChildFrame(frame, iframeId);
                if (!frame) {
                    logger_1.logger.error(`Cannot find frame with id=${iframeId}`);
                    throw new errors_1.ElementNotFoundError(tf623_id);
                }
            }
        }
        return frame.locator(`[tf623_id="${tf623_id}"]`);
    });
}
