/**
 * User Agent presets for different operating systems.
 * By selecting specific preset underlying remote browser will mimic user agent of the selected operating system modifying HTTP headers, navigator object and more.
 */
declare enum UserAgentPreset {
    WINDOWS = "windows",
    MACOS = "macos",
    LINUX = "linux"
}
/**
 * Create a new remote browser session via Tetra.
 *
 * @param uaPreset - User Agent preset (windows, macos, linux). Optional.
 * @returns A BrowserSession object with cdpUrl property for connecting to the browser
 * @throws APIKeyError if the API key is not set or invalid
 * @throws Error if the API request fails
 */
declare function createBrowserSession(uaPreset?: UserAgentPreset): Promise<BrowserSession>;
/**
 * Represents an allocated browser session with CDP connection details.
 */
declare class BrowserSession {
    private _cdpUrl;
    private _baseUrl;
    /**
     * Initialize BrowserSession with session data from the API.
     *
     * @param sessionData - Raw session data returned from the browser allocation API
     * @throws Error if required fields are missing from sessionData
     */
    constructor(sessionData: Record<string, any>);
    /**
     * Get the Chrome DevTools Protocol URL for connecting to the browser.
     *
     * @returns The CDP URL for browser connection
     */
    get cdpUrl(): string;
    /**
     * Get the page streaming URL for a specific page number.
     *
     * @param pageNum - The page number to get the streaming URL for
     * @returns The streaming URL for the specified page
     */
    getPageStreamingUrl(pageNum: number): string;
}
export { createBrowserSession, BrowserSession, UserAgentPreset };
//# sourceMappingURL=tetra.d.ts.map